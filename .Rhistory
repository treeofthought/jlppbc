close(fileConn)
}
WriteTableJSON(all)
WriteTableJSON(all, 'src/all.json')
dat <- LoadRatings('Potter')
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
wide <- ShapeRatingTable(dat)
View(wide)
wide[order(-Avg)]
dat <- LoadRatings('Potter')
wide <- ShapeRatingTable(dat)
wide[, .(Title, Avg, C, D, J, S)]
wide[, .(Title, Avg, C, D, J, S)][order(-Avg)]
dat <- LoadRatings(c('Potter', 'JLPPBC', 'NBGMSP'))
wide <- ShapeRatingTable(dat)
wide[, .(Title, Avg, C, D, J, S)][order(-Avg)]
dat <- LoadRatings(c('Potter'))
wide <- ShapeRatingTable(dat)
wide[, .(Title, Avg, C, D, J, S)][order(-Avg)]
wide <- ShapeRatingTable(dat)
dat <- LoadRatings(c('NBGMSP'))
wide <- ShapeRatingTable(dat)
wide[, .(Title, Avg, C, J, S)][order(-Avg)]
dat <- LoadRatings(c('NBGMSP'))
wide <- ShapeRatingTable(dat)
wide[, .(Title, Avg, C, J, S)][order(-Avg)]
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
dat <- LoadRatings()
source('R/functions.R')
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
wide
books <- fread('data/books.csv')
books[, slug := tolower(title)]
books[, slug := gsub(' ', '-', title)]
books[, slug := gsub('[^0-9a-zA-Z-]')]
books[, slug := gsub('[^0-9a-zA-Z-]', '', title)]
books
books[, slug := tolower(title)]
books[, slug := gsub(' ', '-', title)]
books[, slug := gsub('[^0-9a-zA-Z\-]', '', title)]
books[, slug := gsub('[^0-9a-zA-Z\\-]', '', title)]
books
books[, slug := tolower(title)]
books[, slug := gsub(' ', '-', slug)]
books[, slug := gsub('[^0-9a-zA-Z\\-]', '', slug)]
books
write.csv(books, 'data/books.csv', row.names=F)
books <- fread('data/books.csv')
stu <- fread('data/ratings/stu.csv')[!is.na(Rating)]
stu[, User := 'S']
james <- fread('data/ratings/james.csv')[!is.na(Rating)]
james[, User := 'J']
pierce <- fread('data/ratings/pierce.csv')[!is.na(Rating)]
pierce[, User := 'P']
chris <- fread('data/ratings/chris.csv')[!is.na(Rating)]
chris[, User := 'C']
dan <- fread('data/ratings/dan.csv')[!is.na(Rating)]
dan[, User := 'D']
dat <- rbind(stu, james, pierce, chris, dan)
dat <- merge(dat, books, by=c('Title', 'Author'))
dat
dat <- merge(dat, books, by=c('title', 'author'))
books <- fread('data/books.csv')
books
dat <- rbind(stu, james, pierce, chris, dan)
dat <- dat[, .(title=Title, author=Author, rating=Rating, user=User)]
dat <- merge(dat, books, by=c('title', 'author'))
dat
write.csv(dat, 'data/rankings.csv', row.names=F)
study <- LoadRatings()
study
dat <- fread('data/rankings.csv')
dat
LoadRatings <- function(groups=c('JLPPBC')) {
dat <- fread('data/rankings.csv')
dat <- dat[, .(Title=title, Author=author, Rating=Rating, User=user,
Group=group)]
return(dat[Group %in% groups])
}
StackRatings
StackRatings()
StackRatings <- function() {
books <- fread('data/books.csv')
stu <- fread('data/ratings/stu.csv')[!is.na(Rating)]
stu[, User := 'S']
james <- fread('data/ratings/james.csv')[!is.na(Rating)]
james[, User := 'J']
pierce <- fread('data/ratings/pierce.csv')[!is.na(Rating)]
pierce[, User := 'P']
chris <- fread('data/ratings/chris.csv')[!is.na(Rating)]
chris[, User := 'C']
dan <- fread('data/ratings/dan.csv')[!is.na(Rating)]
dan[, User := 'D']
dat <- rbind(stu, james, pierce, chris, dan)
dat <- dat[, .(title=Title, author=Author, rating=Rating, user=User)]
dat <- merge(dat, books, by=c('title', 'author'))
write.csv(dat, 'data/rankings.csv', row.names=F)
}
StackRatings()
StackRatings <- function() {
books <- fread('data/books.csv')
stu <- fread('data/ratings/stu.csv')[!is.na(Rating)]
stu[, User := 'S']
james <- fread('data/ratings/james.csv')[!is.na(Rating)]
james[, User := 'J']
pierce <- fread('data/ratings/pierce.csv')[!is.na(Rating)]
pierce[, User := 'P']
chris <- fread('data/ratings/chris.csv')[!is.na(Rating)]
chris[, User := 'C']
dan <- fread('data/ratings/dan.csv')[!is.na(Rating)]
dan[, User := 'D']
dat <- rbind(stu, james, pierce, chris, dan)
dat <- dat[, .(title=Title, author=Author, rating=Rating, user=User)]
dat <- merge(dat, books, by=c('title', 'author'))
write.csv(dat, 'data/ratings.csv', row.names=F)
}
StackRatings()
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
dat <- LoadRatings()
LoadRatings <- function(groups=c('JLPPBC')) {
dat <- fread('data/ratings.csv')
dat <- dat[, .(Title=title, Author=author, Rating=Rating, User=user,
Group=group)]
return(dat[Group %in% groups])
}
dat <- LoadRatings()
LoadRatings <- function(groups=c('JLPPBC')) {
dat <- fread('data/ratings.csv')
dat <- dat[, .(Title=title, Author=author, Rating=rating, User=user,
Group=group)]
return(dat[Group %in% groups])
}
dat <- LoadRatings()
dat
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
dat
library('ggplot2')
dat[, Reader := User]
ggplot(dat, aes(x=Reader, y=Rating)) +
ggtitle('Rating Distributions') +
#geom_boxplot() +
geom_errorbar(data=agg, aes(ymin=Average-Std.Dev, ymax=Average+Std.Dev, y=Average)) +
geom_point(data=agg, aes(y=Average), size=3) +
geom_jitter(height=0, width=0.3, alpha=0.2) +
scale_y_continuous(breaks=seq(0, 10, 2)) +
expand_limits(y=0) +
theme_bw() +
theme(plot.title = element_text(hjust=0.5, size=14),
axis.text.y = element_text(size=10),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size=6),
legend.text = element_text(size=7),
#plot.background = element_rect(fill='transparent'),
#legend.background = element_rect(fill='transparent'),
legend.position = 'top',
legend.key.height = unit(0.1, 'cm'),
legend.key.width = unit(1.5, 'cm'),
panel.grid.minor = element_blank())
agg <- dat[,.(Average=round(mean(Rating), 1),
Std.Dev=round(sd(Rating), 1),
Ratings=.N),
.(Reader=User)]
ggplot(dat, aes(x=Reader, y=Rating)) +
ggtitle('Rating Distributions') +
#geom_boxplot() +
geom_errorbar(data=agg, aes(ymin=Average-Std.Dev, ymax=Average+Std.Dev, y=Average)) +
geom_point(data=agg, aes(y=Average), size=3) +
geom_jitter(height=0, width=0.3, alpha=0.2) +
scale_y_continuous(breaks=seq(0, 10, 2)) +
expand_limits(y=0) +
theme_bw() +
theme(plot.title = element_text(hjust=0.5, size=14),
axis.text.y = element_text(size=10),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size=6),
legend.text = element_text(size=7),
#plot.background = element_rect(fill='transparent'),
#legend.background = element_rect(fill='transparent'),
legend.position = 'top',
legend.key.height = unit(0.1, 'cm'),
legend.key.width = unit(1.5, 'cm'),
panel.grid.minor = element_blank())
agg
wide
ggplot(wide, aes(x=S, y=D)) +
geom_point() +
theme_bw()
wide
ggplot(wide, aes(x=as.numeric(S), y=as.numeric(D))) +
geom_point() +
theme_bw()
wide
wide[, cor(as.numeric(S), as.numeric(D), use='complete')]
wide[, cor(as.numeric(J), as.numeric(D), use='complete')]
ggplot(wide, aes(x=as.numeric(J), y=as.numeric(D))) +
geom_point() +
theme_bw()
ggplot(wide, aes(x=as.numeric(P), y=as.numeric(D))) +
geom_point() +
theme_bw()
ggplot(wide, aes(x=as.numeric(C), y=as.numeric(D))) +
geom_point() +
theme_bw()
ggplot(wide, aes(x=as.numeric(C), y=as.numeric(S))) +
geom_point() +
theme_bw()
wide[, cor(as.numeric(S), as.numeric(C), use='complete')]
wide
wide[, low.rank := frankv(Avg, ties.method='min')]
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
wide
Wide[Ratings==1]
wide[Ratings==1]
wide[, low.rank := frankv(Avg, ties.method='min')]
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
wide[low.rank <= 5]
low <- wide[low.rank <= 5][order(Avg)]
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
low
WriteTableJSON(low, 'src/worst.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[hight.rank <= 5])
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
agg
wide
wide[order(-Avg)]
Wide[Avg < 5]
wide[Avg < 5]
wide[Avg < 5, mean(as.numeric(D))]
wide[Avg < 6, mean(as.numeric(D))]
wide[Avg < 5, mean(as.numeric(D))]
wide[Avg < 5, .(Title, Avg, D)]
wide[Avg > 8.5, .(Title, Avg, D)]
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
wide[Title=='Artemis']
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
low
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
dat[, sd(Rating), Title]
dat[, sd(Rating), Title][order(-V1)]
dat[, .(sd(Rating), mean(Rating)), Title][order(-V1)]
WriteTableJSON(best, 'src/best.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
library("PerformanceAnalytics")
chart.Correlation(wide[, .(C, J, P, S)], histogram=TRUE, pch=19)
wide.num <- wide[, .(C=as.numeric(C), D=as.numeric(D), J=as.numeric(J),
P=as.numeric(P), S=as.numeric(S))]
chart.Correlation(wide.num[, .(C, J, P, S)], histogram=TRUE, pch=19)
chart.Correlation(wide.num[, .(C, D, J, P, S)], histogram=TRUE, pch=19)
sam <- fread('data/ratings/sam.csv')[!is.na(Rating)]
sam[, User := 'G']
sam
dat <- rbind(stu, james, pierce, chris, dan, sam)
source('R/functions.R')
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
library('jsonlite')
library('ggplot2')
library("PerformanceAnalytics")
source('R/functions.R')
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
library('jsonlite')
library('ggplot2')
library("PerformanceAnalytics")
source('R/functions.R')
StackRatings()
dat <- LoadRatings()
wide <- ShapeRatingTable(dat)
all <- TrimRatingTable(wide)
all <- all[order(-Avg)]
WriteTableJSON(all, 'src/all.json')
wide[, low.rank := frankv(Avg, ties.method='min')]
low <- TrimRatingTable(wide[low.rank <= 5])
low <- low[order(Avg)]
WriteTableJSON(low, 'src/worst.json')
wide[, high.rank := frankv(Avg, order=-1, ties.method='min')]
best <- TrimRatingTable(wide[high.rank <= 5])
best <- best[order(-Avg)]
WriteTableJSON(best, 'src/best.json')
# Viz distributions
dat[, Reader := User]
agg <- dat[,.(Average=round(mean(Rating), 1),
Std.Dev=round(sd(Rating), 1),
Ratings=.N),
.(Reader=User)]
agg
ggplot(wide, aes(x=as.numeric(C), y=as.numeric(S))) +
geom_point() +
theme_bw()
ggplot(dat, aes(x=Reader, y=Rating)) +
ggtitle('Rating Distributions') +
#geom_boxplot() +
geom_errorbar(data=agg, aes(ymin=Average-Std.Dev, ymax=Average+Std.Dev, y=Average)) +
geom_point(data=agg, aes(y=Average), size=3) +
geom_jitter(height=0, width=0.3, alpha=0.2) +
scale_y_continuous(breaks=seq(0, 10, 2)) +
expand_limits(y=0) +
theme_bw() +
theme(plot.title = element_text(hjust=0.5, size=14),
axis.text.y = element_text(size=10),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size=6),
legend.text = element_text(size=7),
#plot.background = element_rect(fill='transparent'),
#legend.background = element_rect(fill='transparent'),
legend.position = 'top',
legend.key.height = unit(0.1, 'cm'),
legend.key.width = unit(1.5, 'cm'),
panel.grid.minor = element_blank())
chart.Correlation(wide.num[, .(C, D, J, P, S)], histogram=TRUE, pch=19)
StackRatings()
fread('../jlppapi/books.csv')
fread('../jlppapi/data/books.csv')
ratings <- fread('../jlppapi/data/ratings.csv')
books$title
ratings$title
books$title
unique(ratings$title)
books$title
setdiff(unique(ratings$title), books$title)
unique(ratings$title)
books$title
setdiff(unique(ratings$title), books$title)
setdiff(books$title, unique(ratings$title))
nrow(ratings)
dat[, .N, .(User, Title)]
dat[, .N, .(User, Title)][N>1]
1 / 163
100 / 8
100 / 92
60 / 12
5 * 8
* 24
40* 24
calls <- 0.08
24 * 12
x <- 0:9
y <- 2*x %% 10
x
y
y <- (2*x) %% 10
y
x - y
which.max(x - y)
x[which.max(x - y)]
abs(x-y)
mean(abs(x-y))
library('DBI')
library('data.table')
library('ggplot2')
library('stringr')
query <- "select * from bi_views.fct_pageviews limit 1"
GetData <- function(query) {
con <- dbConnect(
bigrquery::bigquery(),
project = "sunbound-website-analytics",
dataset = "sunbound_homes_production",
billing = 'sunbound-website-analytics'
)
dat <- as.data.table(dbGetQuery(con, query))
dbDisconnect(con)
return(dat[])
}
query <- "select * from bi_views.fct_pageviews limit 1"
dat <- GetData(query)
install.packages('bigrquery')
query <- "select * from bi_views.fct_pageviews limit 1"
dat <- GetData(query)
query <- "select * from bi_views.fct_pageviews limit 1"
dat <- GetData(query)
rlang::last_error()
bq_deauth()
bigrquery::bq_death()
libray('bigrquery')
library('bigrquery')
bq_deauth()
dat <- GetData(query)
dat
query <- "select u.anonymous_id, u.original_referrer, u.original_path, u.original_source, u.first_form_submit_at, p.timestamp, p.path
from bi_views.dim_users u
join bi_views.fct_pageviews p on p.anonymous_id = u.anonymous_id
and p.is_real"
dat <- GetData(query)
dat
dat[, .N, original_source]
dat[grepl('tiktok', original_referrer), .N, original_source]
dat[grepl('tiktok', original_referrer), original_source := 'tiktok']
dat[, .(pageviews=.N, unique.pages=length(unique())), .(anonymous_id, original_source)]
dat[, .(pageviews=.N, unique.pages=length(unique(path))), .(anonymous_id, original_source)]
dat[, .(pageviews=.N, unique.pages=length(unique(path))), .(anonymous_id, original_source, form_submitted=!is.na(first_form_submit_at))]
agg <- dat[, .(pageviews=.N, unique.pages=length(unique(path))), .(anonymous_id, original_source, form_submitted=!is.na(first_form_submit_at))]
full.agg <- dat[, .(submit.rate = mean(form_submitted),
avg.pageviews = mean(pageviews),
avg.unique.pages = mean(unique.pages)), .(original_source)]
full.agg <- agg[, .(submit.rate = mean(form_submitted),
avg.pageviews = mean(pageviews),
avg.unique.pages = mean(unique.pages)), .(original_source)]
full.agg
full.agg[order(-avg.pageviews)]
full.agg <- agg[, .(submit.rate = round(mean(form_submitted), 2),
avg.pageviews = mean(pageviews),
avg.unique.pages = mean(unique.pages)), .(original_source)]
full.agg
full.agg <- agg[, .(submit.rate = round(mean(form_submitted), 3),
avg.pageviews = mean(pageviews),
avg.unique.pages = mean(unique.pages)), .(original_source)]
full.agg
full.agg[order(avg.pageviews)]
source("~/.active-rstudio-document", echo=TRUE)
full.agg[order(-avg.pageviews)]
full.agg <- agg[, .(submit.rate = round(mean(form_submitted), 3),
avg.pageviews = mean(pageviews),
avg.unique.pages = mean(unique.pages),
users=length(unique(anonymous_id))), .(original_source)]
full.agg[order(-avg.pageviews)]
full.agg[users > 5][order(-avg.pageviews)]
dat[original_source == 'uncategorized']
dat[original_source == 'uncategorized', original_referrer]
dat[original_source == 'uncategorized', .N, original_referrer]
dat[original_source == 'uncategorized', .N, original_referrer][order(-N)]
View(dat[original_source == 'uncategorized', .N, original_referrer][order(-N)])
View(dat[original_source == 'uncategorized', .(.N, sum(!is.na(first_form_submit_at))), original_referrer][order(-N)])
1/7
.25 * 3500
875 + 1750
3500 - 2625
.25 / .75
.3333 * 2500
833.25 / 3500
833.25 * 2
1000 / 3500
28.57 + 25 + 50
